name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  MYSQL_VERSION: '8.0'

jobs:
  # Lint and format check
  lint:
    name: Lint and Format Check
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install backend dependencies
      working-directory: ./server
      run: npm ci
      
    - name: Run backend linting
      working-directory: ./server
      run: npm run lint
      
    - name: Install frontend dependencies
      working-directory: ./front_end
      run: npm ci
      
    - name: Run frontend linting
      working-directory: ./front_end
      run: npm run lint

  # Backend tests
  backend-tests:
    name: Backend Tests
    runs-on: ubuntu-latest
    
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: rootpassword
          MYSQL_DATABASE: movies-app-test
        options: >-
          --health-cmd="mysqladmin ping"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3
        ports:
          - 3306:3306
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      working-directory: ./server
      run: npm ci
      
    - name: Create environment file
      working-directory: ./server
      run: |
        cat > .env << EOF
        DB_HOST=localhost
        DB_DATABASE=movies-app-test
        DB_USERNAME=root
        DB_PASSWORD=rootpassword
        DB_PORT=3306
        SECRET_TOKEN=test-secret-key
        JWT_EXPIRES_IN=1h
        PORT=3000
        NODE_ENV=test
        DEV_HOST=http://localhost:4200
        ALLOWED_ORIGINS=http://localhost:4200
        RATE_LIMIT_WINDOW_MS=900000
        RATE_LIMIT_MAX_REQUESTS=100
        BCRYPT_ROUNDS=10
        SESSION_SECRET=test-session-secret
        LOG_LEVEL=error
        LOG_FORMAT=combined
        EOF
        
    - name: Wait for MySQL
      run: |
        while ! mysqladmin ping -h"localhost" -P"3306" --silent; do
          sleep 1
        done
        
    - name: Setup test database
      run: |
        mysql -h localhost -P 3306 -u root -prootpassword movies-app-test < movies-app.sql
        
    - name: Run backend tests
      working-directory: ./server
      run: npm test
      
    - name: Upload test coverage
      uses: codecov/codecov-action@v3
      with:
        file: ./server/coverage/lcov.info
        flags: backend
        name: backend-coverage

  # Frontend tests
  frontend-tests:
    name: Frontend Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      working-directory: ./front_end
      run: npm ci
      
    - name: Run unit tests
      working-directory: ./front_end
      run: npm test -- --watch=false --browsers=ChromeHeadless --code-coverage
      
    - name: Run e2e tests
      working-directory: ./front_end
      run: npm run e2e
      
    - name: Upload test coverage
      uses: codecov/codecov-action@v3
      with:
        file: ./front_end/coverage/lcov.info
        flags: frontend
        name: frontend-coverage

  # Security audit
  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install backend dependencies
      working-directory: ./server
      run: npm ci
      
    - name: Run backend security audit
      working-directory: ./server
      run: npm audit --audit-level=moderate
      
    - name: Install frontend dependencies
      working-directory: ./front_end
      run: npm ci
      
    - name: Run frontend security audit
      working-directory: ./front_end
      run: npm audit --audit-level=moderate

  # Build and test Docker
  docker-build:
    name: Docker Build Test
    runs-on: ubuntu-latest
    needs: [lint, backend-tests, frontend-tests]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Build and test Docker images
      run: |
        docker-compose build
        docker-compose up -d
        sleep 30
        curl -f http://localhost:3000/health || exit 1
        docker-compose down

  # Deploy to staging (on main branch)
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [lint, backend-tests, frontend-tests, security-audit, docker-build]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Deploy to staging environment
      run: |
        echo "Deploying to staging environment..."
        # Add your staging deployment logic here
        # Example: Deploy to Heroku, AWS, or other cloud platform

  # Deploy to production (on tags)
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [lint, backend-tests, frontend-tests, security-audit, docker-build]
    if: startsWith(github.ref, 'refs/tags/v')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Deploy to production environment
      run: |
        echo "Deploying to production environment..."
        # Add your production deployment logic here
        # Example: Deploy to Heroku, AWS, or other cloud platform

  # Performance testing
  performance-test:
    name: Performance Test
    runs-on: ubuntu-latest
    needs: [docker-build]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Start application
      run: |
        docker-compose up -d
        sleep 30
        
    - name: Run performance tests
      run: |
        # Add performance testing logic here
        # Example: Using k6, Artillery, or similar tools
        echo "Running performance tests..."
        
    - name: Stop application
      run: docker-compose down

  # Dependency updates
  dependency-updates:
    name: Check for Dependency Updates
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Check backend dependencies
      working-directory: ./server
      run: npm outdated
      
    - name: Check frontend dependencies
      working-directory: ./front_end
      run: npm outdated
      
    - name: Create issue for updates
      uses: actions/github-script@v7
      with:
        script: |
          github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: 'Dependency Updates Available',
            body: 'Some dependencies have updates available. Please review and update as needed.',
            labels: ['dependencies', 'maintenance']
          }) 